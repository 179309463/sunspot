module Sunspot
  #
  # A dynamic query is a proxy object that implements a subset of the API of
  # the Query class, but wraps a dynamic field definition and thus applies the
  # query components using dynamic field instances. Dynamic queries do not hold
  # their own state, but rather proxy to the query that generated them, adding
  # components directly to the owning query's internal state.
  # 
  # DynamicQuery instances are publicly generated by the Query#dynamic_query
  # factory method.
  # 
  class DynamicQuery
    def initialize(dynamic_field, query) #:nodoc:
      @dynamic_field, @query = dynamic_field, query
    end

    # 
    # Add a restriction based on the dynamic field definition and dynamic name
    # given.
    #
    # ==== Parameters
    #
    # dynamic_name<Symbol>::
    #   Dynamic name to apply to the field in the restriction.
    # restriction_type<Symbol,Class>::
    #   Type of restriction to apply (e.g. Sunspot::Restriction::EqualTo), or
    #   symbol shorthand (e.g. :equal_to)
    # value::
    #   Value to apply to the restriction.
    # negated::
    #   Whether to negate the restriction (prefer #add_negated_restriction)
    # 
    def add_restriction(dynamic_name, restriction_type, value, negated = false)
      if restriction_type.is_a?(Symbol)
        restriction_type = Restriction[restriction_type]
      end
      @query.add_component(restriction_type.new(@dynamic_field.build(dynamic_name), value, negated))
    end

    # 
    # Add a field facet based on the dynamic field definition and dynamic name
    # given.
    #
    # ==== Parameters
    #
    # dynamic_name<Symbol>:: Dynamic name to facet on
    # 
    def add_field_facet(dynamic_name)
      @query.add_component(Facets::FieldFacet.new(@dynamic_field.build(dynamic_name)))
    end

    # 
    # Order by the given dynamic field.
    #
    # ==== Parameters
    #
    # dynamic_name<Symbol>:: Dynamic name of ordering field
    # direction<Symbol>:: Direction in which to order (:asc, :desc)
    # 
    def order_by(dynamic_name, direction)
      @query.sort << { @dynamic_field.build(dynamic_name).indexed_name.to_sym => (direction.to_s == 'asc' ? :ascending : :descending) }
    end
  end
end
